{
  "name": "grunt-shell",
  "version": "0.1.3",
  "description": "Grunt task to run shell commands",
  "keywords": [
    "gruntplugin",
    "grunt",
    "shell",
    "command",
    "cmd",
    "exec",
    "spawn",
    "cli"
  ],
  "homepage": "https://github.com/sindresorhus/grunt-shell",
  "bugs": "https://github.com/sindresorhus/grunt-shell/issues",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "main": "grunt.js",
  "bin": {
    "grunt-shell": "bin/grunt-shell"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sindresorhus/grunt-shell.git"
  },
  "devDependencies": {
    "grunt": "~0.3.12"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": {
    "type": "MIT"
  },
  "readme": "# grunt-shell\n\n[Grunt][grunt] task to run shell commands.\n\nE.g. compile Compass (`compass compile`) or get the current git branch (`git branch`).\n\n\n## Getting started\n\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-shell`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-shell');\n```\n\n\n## Documentation\n\n\n### Example usage\n\nThis grunt task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them. The `dist` below is a subtask, you could e.g. create a `dev` subtask to handle stuff while developing. You can also add a special subtask named `_options` that can contain options for all your subtasks.\n\n\n#### Run command\n\nCreate a folder named `test`.\n\n```javascript\nshell: {\n\tmake_directory: {\n\t\tcommand: 'mkdir test'\n\t}\n}\n```\n\n\n#### Run command and display output\n\nOutput a directory listing to your Terminal.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t}\n}\n```\n\n\n#### Run command and handle output\n\nDo whatever you want with the stdout.\n\n```javascript\nfunction log() {\n\tconsole.log( this );\n}\n\n...\n\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: log\n\t}\n}\n```\n\n#### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` option.\n\n```javascript\nshell: {\n\tsubfolder_ls: {\n\t\tcommand: 'ls',\n\t\tstdout: true,\n\t\texecOptions: {\n\t\t\tcwd: './tasks'\n\t\t}\n\t}\n}\n```\n\n\n#### Custom callback\n\nDefine custom callback method to handle everything yourself. Check out [shell.js](https://github.com/sindresorhus/grunt-shell/blob/master/tasks/shell.js) to see how it's handled by default.\n\n```javascript\nfunction customHandler() {\n\tconsole.log( this, this.data.stdout );\n}\n\n...\n\nshell: {\n\tls: {\n\t\tcommand: 'ls',\n\t\tcallback: customHandler\n\t}\n}\n```\n\n\n#### Multiple subtasks\n\nThis task is a [multi task](https://github.com/cowboy/grunt/blob/master/docs/types_of_tasks.md#multi-tasks-%E2%9A%91), which means you can specify multiple subtasks and grunt will iterate over them.\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcompile_coffescript: {\n\t\tcommand: 'coffee main.coffee',\n\t\tfailOnError: true\n\t}\n}\n```\n\n#### Global options\n\nYou can define global options in a subtask called `_options`. Your subtasks will then inherit those options with the ability to override them.\n\n\n```javascript\nshell: {\n\tdirectory_listing: {\n\t\tcommand: 'ls',\n\t\tstdout: true\n\t},\n\tcreate_folder: {\n\t\tcommand: 'mkdir test',\n\t\tfailOnError: false\n\t},\n\t_options: {\n\t\tfailOnError: true\n\t}\n}\n```\n\n\n### Options\n\n\n#### command\n\n**Required**  \nAccepts: String\n\nYour command is my wish.\n\n\n#### stdout\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stdout in the Terminal. You can supply a function to handle the output.\n\n\n#### stderr\n\nDefault: `false`  \nAccepts: Boolean / Function\n\nShow stderr in the Terminal. You can supply a function to handle the output.\n\n\n#### failOnError\n\nDefault: `false`  \nAccepts: Boolean\n\nFail task if it encounters an error.\n\n\n#### execOptions\n\nDefault: `undefined`  \nAccepts: Object\n\nSpecify some options to be passed to the [.exec()](http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` String *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` Boolean\n- `encoding` String *(Default: 'utf8')*\n- `timeout` Number *(Default: 0)*\n- `maxBuffer` Number *(Default: 200\\*1024)*\n- `killSignal` String *(Default: 'SIGTERM')*\n\n\n#### callback\n\nDefault: `undefined`  \nAccepts: Function\n\nLets you override the default callback with your own. Everything you need is available on `this`.\n\n\n## Tests\n\nGrunt currently doesn't have a way to test tasks directly. You can test this task by running `grunt` and manually verify that it works.\n\n\n## Contribute\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.\n\n\n## License\n\nMIT License\n(c) [Sindre Sorhus](http://sindresorhus.com)\n\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md",
  "_id": "grunt-shell@0.1.3",
  "dist": {
    "shasum": "ac4ca1e0293969df87651d4be5f7b68aea60eb28"
  },
  "_from": "grunt-shell"
}
